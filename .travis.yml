language: cpp
sudo: false


os:
  - linux
  - osx


cache:
  ccache: true
  directories:
    - $HOME/.ccache
    - $CLING_BUILD_DEPS

env:
  global:
    - USE_CCACHE=1
    - CCACHE_COMPRESS=1
    - CCACHE_MAXSIZE=500M
    - CCACHE_CPP2=1
    - CLING_BUILD_DEPS=$TRAVIS_BUILD_DIR/deps/
    - CLING_LOCAL_BIN=$TRAVIS_BUILD_DIR/bin/


matrix:
  # Abort all builds on a single failing matrix entry.
  fast_finish: true

  exclude:
    # Note: Workaround travis-ci/travis-ci#4681
    # Exclude default job which lacks our included environment variables.
    - os: osx
    - os: linux

  include:

  # 1. Linux Clang Builds

    - os: linux
      compiler: clang
      addons: &clang37
        apt:
          sources: ['llvm-toolchain-precise-3.7', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.7', '^libc\+\+-dev']
      env: CXX_COMPILER='clang++-3.7' CC_COMPILER='clang-3.7' BUILD_TYPE='Release'


  # 2. Linux GCC Builds

    - os: linux
      compiler: gcc
      addons: &gcc49
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9']
      env: CXX_COMPILER='g++-4.9' CC_COMPILER='gcc-4.9' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc49
      env: CXX_COMPILER='g++-4.9' CC_COMPILER='gcc-4.9' BUILD_TYPE='Debug'

  # 3. OSX Clang Builds

    - os: osx
      compiler: clang
      osx_image: xcode7.2
      env: CXX_COMPILER='clang++' CC_COMPILER='clang' BUILD_TYPE='Release'

  allow_failures:
    - os: osx
    # libc++-dev is not whitelisted yet (https://github.com/travis-ci/apt-package-whitelist/issues/3266)
    # The build falls back to an old version and fails.
    - os: linux
      compiler: clang

install:
# If cmake is not in the cache, download it.
- |
  if [ $TRAVIS_OS_NAME == 'linux' ]; then
    CMAKE_URL="https://cmake.org/files/v3.6/cmake-3.6.0-Linux-x86_64.tar.gz"
    export CMAKE=$CLING_BUILD_DEPS/cmake/bin/cmake
  elif [ $TRAVIS_OS_NAME == 'osx' ] ; then
    CMAKE_URL="https://cmake.org/files/v3.6/cmake-3.6.0-Darwin-x86_64.tar.gz"
    export CMAKE=$CLING_BUILD_DEPS/cmake/CMake.app/Contents/bin/cmake
  fi

  if [ ! -f $CMAKE ]; then
    mkdir -pv $CLING_BUILD_DEPS/cmake
    travis_retry curl -k $CMAKE_URL | tar --strip-components=1 -xz -C $CLING_BUILD_DEPS/cmake
  fi

before_script:
- export CC=${CC_COMPILER}
- export CXX=${CXX_COMPILER}
- export PATH=$CLING_LOCAL_BIN:$PATH

#- export
#- which ccache
- $CMAKE --version
- $CC --version
- $CXX --version

script:
#- |
#  mkdir -pv $CLING_LOCAL_BIN
#  touch "$CLING_LOCAL_BIN/$CXX"; ls "$CLING_LOCAL_BIN/$CXX" ; echo "ccache $CXX" > "$CLING_LOCAL_BIN/$CXX"
#  echo "ccache $CC" > "$CLING_LOCAL_BIN/$CC"
#  chmod +x "$CLING_LOCAL_BIN/$CXX" && chmod +x "$CLING_LOCAL_BIN/$CC"
- |
  if [ -z $TRAVIS_TAG ]; then
    tools/packaging/cpt.py --current-dev=tar --with-cling-url=https://github.com/vgvassilev/cling --verbose --debug-on-error
  else
    tools/packaging/cpt.py --last-stable=tar --with-cling-url=https://github.com/vgvassilev/cling
  fi
- ccache -s

notifications:
  recipients:
  - ani07nov@gmail.com
  - vvasilev@cern.ch
  email:
    on_success: change
    on_failure: always
  template:
  - "%{repository}/%{branch} (%{commit} - %{author}): %{message}"

before_deploy:
- export RELEASE_TARBALL=$(ls $HOME/ci/build/cling*.tar.bz2)
- echo "Deploying $RELEASE_TARBALL to GitHub releases"

deploy:
  provider: releases
  skip_cleanup: true
  api_key:
    secure: eIwVHJNxkAIi6IUYyx7qI1szsgWt3c42ugcJ1vZ6iH//+qJgks77I8dMlbRf0RUrhxpJhJPH5a6vqI/mo1Vq2vmoC8+D1DIQCbj+/WHhY71LQCPC+Wgj2JES5y1Wh91nMt4ybzb1dA8BIfeJOdCUn7ezJTGKk18N+h2jE+a/7IE=
  file: '${RELEASE_TARBALL}'
  on:
    tags: true
    repo: vgvassilev/cling

after_failure:
- |
  cat /home/travis/ci/build/builddir/CMakeFiles/CMakeOutput.log
  cat /home/travis/ci/build/builddir/CMakeFiles/CMakeError.log
