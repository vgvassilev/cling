language: cpp
sudo: false


os:
  - linux
  - osx


cache:
  apt: true
  ccache: true
  directories:
    - $HOME/.ccache
    - $CLING_BUILD_DEPS

env:
  global:
    - USE_CCACHE=1
    - CCACHE_COMPRESS=1
    - CCACHE_MAXSIZE=500M
    - CCACHE_CPP2=1
    - TIMEOUT=0
    - EXECUTE_COMMAND=
    - CXX_COMPILER=
    - CC_COMPILER=
    - COMPILER_VERSION=
    - secure: "DQSDJnYWR7kb2ylcE1e4GIfP9KJadHjG696HelK09zmsTJiRoxg2HhDnm3gHkrPh18AxYJAMW1rZHm0ZsnBKpS09NxOcPVseL+z3iWfBFpgCa2ueUMKHy/YBhNghmLOXVeQzGwol6iCU5xbO4ZMJHpytmQCH6Vm9ws7sg8kiatY="


# Do not build our sync branch.
branches:
  except:
    - /^__internal.*$/
  only:
    - master


matrix:
  # Abort all builds on a single failing matrix entry.
  fast_finish: true

  exclude:
    # Note: Workaround travis-ci/travis-ci#4681
    # Exclude default job which lacks our included environment variables.
    - os: osx
    - os: linux

  include:

  # 1. Linux Clang Builds

    - os: linux
      compiler: clang
      addons: &clang37
        apt:
          sources: ['llvm-toolchain-precise-3.7', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.7', '^libc\+\+-dev']
      env: CXX_COMPILER='clang++' CC_COMPILER='clang' COMPILER_VERSION='-3.7' BUILD_TYPE='Release'

  # 2. Linux GCC Builds

    - os: linux
      compiler: gcc
      addons: &gcc49
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9']
      env: CXX_COMPILER='g++' CC_COMPILER='gcc' COMPILER_VERSION='-4.9' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      #addons: *gcc49
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['binutils-gold']
      sudo: required
      dist: trusty
      env: CXX_COMPILER='g++' CC_COMPILER='gcc' COMPILER_VERSION='-4.8' BUILD_TYPE='Release'
           TIMEOUT=2400 EXECUTE_COMMAND="sudo ln -s `which gold` /usr/local/bin/ld"


  # 3. OSX Clang Builds

    - os: osx
      compiler: clang
      osx_image: xcode7.2
      env: CXX_COMPILER='clang++' CC_COMPILER='clang' BUILD_TYPE='Release'

    - os: osx
      compiler: clang
      osx_image: xcode7.3
      env: CXX_COMPILER='clang++' CC_COMPILER='clang' BUILD_TYPE='Release'

  allow_failures:
    - os: osx
    # libc++-dev is not whitelisted yet (https://github.com/travis-ci/apt-package-whitelist/issues/3266)
    # The build falls back to an old version and fails.
    - os: linux
      compiler: clang
    # There are linker failures, which need to be further understood.
    - os: linux
      dist: trusty


install:
# If cmake is not in the cache, download it.
- |
  CLING_USER_ROOT=`dirname $TRAVIS_BUILD_DIR`
  export CLING_BUILD_DEPS="$CLING_USER_ROOT/deps"
  export CLING_LOCAL_BIN="$CLING_USER_ROOT/bin"
  if [ $TRAVIS_OS_NAME == 'linux' ]; then
    CMAKE_URL="https://cmake.org/files/v3.6/cmake-3.6.0-Linux-x86_64.tar.gz"
    export CMAKE=$CLING_BUILD_DEPS/cmake/bin/cmake
  elif [ $TRAVIS_OS_NAME == 'osx' ] ; then
    CMAKE_URL="https://cmake.org/files/v3.6/cmake-3.6.0-Darwin-x86_64.tar.gz"
    export CMAKE=$CLING_BUILD_DEPS/cmake/CMake.app/Contents/bin/cmake
    brew install ccache python
    #PATH=/usr/local/opt/ccache/libexec:$PATH
    # Try to workaround travis-ci/travis-ci#6410 by
    # introducing a timeout fulction, which will timeout before the builder,
    # returning a 'fake' success (eg. 0), tricking it to store the cache.
    TIMEOUT=2400
  fi

  # Implement a platform-independent timeout function.
  function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

  if [ ! -f $CMAKE ]; then
    mkdir -pv $CLING_BUILD_DEPS/cmake
    travis_retry curl -k $CMAKE_URL | tar --strip-components=1 -xz -C $CLING_BUILD_DEPS/cmake
  fi

before_script:
- |
  # Get the real paths of the compilers, before overriding it.
  REAL_CXX=$(which $CXX_COMPILER$COMPILER_VERSION)
  REAL_CC=$(which $CC_COMPILER$COMPILER_VERSION)

  echo "Making $CXX_COMPILER$COMPILER_VERSION and $CC_COMPILER$COMPILER_VERSION default."
  mkdir -pv $CLING_LOCAL_BIN

  echo -e "#!/bin/bash\nccache $REAL_CXX \"\$@\"" > $CLING_LOCAL_BIN/$CXX_COMPILER
  echo -e "#!/bin/bash\nccache $REAL_CC \"\$@\"" > $CLING_LOCAL_BIN/$CC_COMPILER

  chmod +x $CLING_LOCAL_BIN/$CXX_COMPILER
  chmod +x $CLING_LOCAL_BIN/$CC_COMPILER

- export PATH=$CLING_LOCAL_BIN:$PATH
- eval $EXECUTE_COMMAND

script:
- |
  if [ -z $TRAVIS_TAG ]; then
    if [ "$TRAVIS_BRANCH" == "master" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ]; then
      # Move the tag to newest master
      git tag --force cling-nightlies HEAD
      git push --force https://$OAUTH_TOKEN@github.com/${TRAVIS_REPO_SLUG} cling-nightlies
    fi

    timeout $TIMEOUT tools/packaging/cpt.py --current-dev=tar --with-cling-url=https://github.com/$TRAVIS_REPO_SLUG --skip-cleanup
  else
    tools/packaging/cpt.py --tarball-tag=$TRAVIS_TAG --with-cling-url=https://github.com/$TRAVIS_REPO_SLUG
  fi

  # Convert the timeout exit code to 0.
  RESULT=$?; if [ $RESULT -eq 0 ] || [ $RESULT -eq 142 ]; then true; else false; fi;

- ccache -s

notifications:
  email:
    recipients:
      #- cling-dev@cern.ch
    on_success: change
    on_failure: always
    template:
      - "%{repository}/%{branch} (%{commit} - %{author}): %{message}"
      - "Build details: %{build_url}"
      - "Change view : %{compare_url}"


before_deploy:
- |
  export RELEASE_TARBALL=$(ls $HOME/ci/build/cling*.tar.bz2)
  if [[ $TRAVIS_TAG -eq "cling-nightlies" ]]; then
    NIGHTLY="`dirname $RELEASE_TARBALL`/`date "+%Y-%b-%d-"``basename $RELEASE_TARBALL`"
    echo "Renaming $RELEASE_TARBALL to $NIGHTLY"
    mv $RELEASE_TARBALL $NIGHTLY
    export RELEASE_TARBALL=$NIGHTLY
  fi
  echo "Deploying $RELEASE_TARBALL to GitHub releases"


deploy:
  provider: releases
  skip_cleanup: true
  api_key: $OAUTH_TOKEN
  file: '${RELEASE_TARBALL}'
  on:
    tags: true
    repo: $TRAVIS_REPO_SLUG

after_failure:
- |
  echo "Dumping env."
  find $CLING_LOCAL_BIN -type f -print0 -exec cat {} \;
  $CMAKE --version
  $CC --version
  $CXX --version
  ls -al `which ld` && ld -v
  export
- |
  echo "Dumping CMakeOutput.log"
  cat /home/travis/ci/build/builddir/CMakeFiles/CMakeOutput.log
- |
  echo "Dumping CMakeError.log"
  cat /home/travis/ci/build/builddir/CMakeFiles/CMakeError.log
- |
  echo "Dumping cling-compiledata.h..."
  COMPILE_DATA_H=$HOME/ci/build/builddir/tools/cling/lib/Interpreter/cling-compiledata.h
  cat $COMPILE_DATA_H

  echo "Running cling-compiledata compiler..."
  COMPDATA_CXX=$(cat $COMPILE_DATA_H | cut -c 18- | sed "s,\",,g")
  eval echo | LC_ALL=C $COMPDATA_CXX -xc++ -E -v -
- |
  echo "Dumping `which ccache`"
  ccache -s
  ls -la /usr/lib/ccache/ || ls -la /usr/local/opt/ccache/libexec
