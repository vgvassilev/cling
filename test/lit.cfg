# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os
import sys
import platform
import re
import subprocess

import lit.util
import lit.formats

if sys.version_info < (3, 0):
    # Python 2.x
    from urllib2 import urlopen
    input = raw_input
else:
    # Python 3.x
    from urllib.request import urlopen

IsWindows = platform.system() == 'Windows'

# Choose between lit's internal shell pipeline runner and a real shell.  If
# LIT_USE_INTERNAL_SHELL is in the environment, we use that as an override.
use_lit_shell = os.environ.get("LIT_USE_INTERNAL_SHELL")
if use_lit_shell:
    # 0 is external, "" is default, and everything else is internal.
    execute_external = (use_lit_shell == "0")
else:
    # Otherwise we default to internal on Windows and external elsewhere, as
    # bash on Windows is usually very slow.
    execute_external = not IsWindows

if IsWindows and not execute_external:
  # Use real Windows path separators so if a test fails, one can copy/paste cmds
  def fixupPath(path):
    return os.path.normpath(path)
else:
  def fixupPath(path):
    return path

# name: The name of this test suite.
config.name = 'Cling'
# Tweak PATH for Win32
if IsWindows:
    # Seek sane tools in directories and set to $PATH.
    path = getattr(config, 'lit_tools_dir', None)
    path = lit_config.getToolsPath(path,
                            config.environment['PATH'],
                            ['cmp.exe', 'grep.exe', 'sed.exe'])
    if path is not None:
        path = os.path.pathsep.join((path,
                                     config.environment['PATH']))
        config.environment['PATH'] = path

    config.environment['LIB'] = os.environ['LIB']
    config.environment['LIBPATH'] = os.environ['LIBPATH']

# testFormat: The test format to use to interpret tests.
#config.test_format = lit_config.formats.TclTest()
config.test_format = lit.formats.ShTest(execute_external)

# suffixes: A list of file extensions to treat as test files.
#config.suffixes = ['.c', '.cpp', '.m', '.mm', '.cu', '.ll', '.cl']

# suffixes: A list of file extensions to treat as test files, this is actually
# set by on_clone().
config.suffixes = ['.C']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)
# test_exec_root: The root path where tests should be run.
cling_obj_root = getattr(config, 'cling_obj_root', None)
if cling_obj_root is not None:
    config.test_exec_root = os.path.join(cling_obj_root, 'test')

# Set llvm_{src,obj}_root for use by others.
config.llvm_src_root = getattr(config, 'llvm_src_root', None)
config.llvm_obj_root = getattr(config, 'llvm_obj_root', None)

# Tweak the PATH to include the tools dir and the scripts dir.
if cling_obj_root is not None:
    llvm_tools_dir = getattr(config, 'llvm_tools_dir', None)
    if not llvm_tools_dir:
        lit_config.fatal('No LLVM tools dir set!')
    path = os.path.pathsep.join((llvm_tools_dir, config.environment['PATH']))
    # For MacOS with libc++, out clang will not find libc++ causing errors with
    # STL. Use the XCode one instead by not adding ours to the path. Cling is
    # still found through deferCling().
    if platform.mac_ver()[0] is '' or \
      float('.'.join(platform.mac_ver()[0].split('.')[:2])) < 10.9:
        config.environment['PATH'] = path

    llvm_libs_dir = getattr(config, 'llvm_libs_dir', None)
    if not llvm_libs_dir:
        lit_config.fatal('No LLVM libs dir set!')
    path = os.path.pathsep.join((llvm_libs_dir,
                                 config.environment.get('LD_LIBRARY_PATH','')))
    config.environment['LD_LIBRARY_PATH'] = path

###

# Check that the object root is known.
if config.test_exec_root is None:
    # Otherwise, we haven't loaded the site specific configuration (the user is
    # probably trying to run on a test file directly, and either the site
    # configuration hasn't been created by the build system, or we are in an
    # out-of-tree build situation).

    # Check for 'cling_site_config' user parameter, and use that if available.
    site_cfg = lit_config.params.get('cling_site_config', None)
    if site_cfg and os.path.exists(site_cfg):
        lit_config.load_config(config, site_cfg)
        raise SystemExit

    # Try to detect the situation where we are using an out-of-tree build by
    # looking for 'llvm-config'.
    #
    # FIXME: I debated (i.e., wrote and threw away) adding logic to
    # automagically generate the lit.site.cfg if we are in some kind of fresh
    # build situation. This means knowing how to invoke the build system though,
    # and I decided it was too much magic. We should solve this by just having
    # the .cfg files generated during the configuration step.

    llvm_config = lit.util.which('llvm-config', config.environment['PATH'])
    if not llvm_config:
        lit_config.fatal('No site specific configuration available!')

    # Get the source and object roots.
    llvm_src_root = lit.util.capture(['llvm-config', '--src-root']).strip()
    llvm_obj_root = lit.util.capture(['llvm-config', '--obj-root']).strip()
    cling_src_root = os.path.join(llvm_src_root, "tools", "cling")
    cling_obj_root = os.path.join(llvm_obj_root, "tools", "cling")

    # Windows CMake cling_obj_root can be (is?) <build>/<Config>, we want <build>
    if IsWindows and not os.path.exists(cling_obj_root):
        cling_obj_root = os.path.join(os.path.dirname(llvm_obj_root), "tools", "cling")

    # Validate that we got a tree which points to here, using the standard
    # tools/cling layout.
    this_src_root = os.path.dirname(config.test_source_root)
    if os.path.realpath(cling_src_root) != os.path.realpath(this_src_root):
        lit_config.fatal('No site specific configuration available!')

    # Check that the site specific configuration exists.
    site_cfg = os.path.join(cling_obj_root, 'test', 'lit.site.cfg')
    if not os.path.exists(site_cfg):
        lit_config.fatal('No site specific configuration available! You may need to '
                  'run "make test" in your Clang build directory.')

    # Okay, that worked. Notify the user of the automagic, and reconfigure.
    lit_config.note('using out-of-tree build at %r' % cling_obj_root)
    lit_config.load_config(config, site_cfg)
    raise SystemExit

###

# Discover the 'cling' to use.

# Load site data from DejaGNU's site.exp.
import re
site_exp = {}
# FIXME: Implement lit.site.cfg.
##for line in open(os.path.join(config.llvm_obj_root, 'test', 'site.exp')):
##    m = re.match('set ([^ ]+) "(.*)"', line)
##    if m:
##       site_exp[m.group(1)] = m.group(2)


# Add substitutions.
##config.substitutions.append(('%llvmgcc_only', site_exp['llvmgcc']))
##for sub in ['llvmgcc', 'llvmgxx', 'emitir', 'compile_cxx', 'compile_c',
##            'link', 'shlibext', 'ocamlopt', 'llvmdsymutil', 'llvmlibsdir',
##            'llvmshlibdir',
##            'bugpoint_topts']:
##    if sub in ('llvmgcc', 'llvmgxx'):
##        config.substitutions.append(('%' + sub,
##                                     site_exp[sub] + ' %emitir -w'))
##    # FIXME: This is a hack to avoid LLVMC tests failing due to a clang driver
##    #        warning when passing in "-fexceptions -fno-exceptions".
##    elif sub == 'compile_cxx':
##        config.substitutions.append(('%' + sub,
##                                  site_exp[sub].replace('-fno-exceptions', '')))
##    else:
##        config.substitutions.append(('%' + sub, site_exp[sub]))
config.substitutions.append(('%shlibext', config.shlibext))

# For each occurrence of an llvm tool name as its own word, replace it
# with the full path to the build directory holding that tool.  This
# ensures that we are testing the tools just built and not some random
# tools that might happen to be in the user's PATH.  Thus this list
# includes every tool placed in $(LLVM_OBJ_ROOT)/$(BuildMode)/bin
# (llvm_tools_dir in lit parlance).
                # Don't match 'bugpoint-' or 'clang-'.
                                        # Don't match '/clang'.
if os.pathsep == ';':
    pathext = os.environ.get('PATHEXT', '').split(';')
else:
    pathext = ['']
for pattern in [r"\bbugpoint\b(?!-)",   r"(?<!/)\bclang\b(?!-)",
                r"\bgold\b",
                r"\bllc\b",             r"\blli\b",
                r"\bllvm-ar\b",         r"\bllvm-as\b",
                r"\bllvm-bcanalyzer\b", r"\bllvm-config\b",
                r"\bllvm-diff\b",       r"\bllvm-dis\b",
                r"\bllvm-extract\b",    r"\bllvm-ld\b",
                r"\bllvm-link\b",       r"\bllvm-mc\b",
                r"\bllvm-nm\b",         r"\bllvm-prof\b",
                r"\bllvm-ranlib\b",     r"\bllvm-shlib\b",
                r"\bllvm-stub\b",       r"\bllvm2cpp\b",
                # Don't match '-llvmc'.
                r"(?<!-)\bllvmc\b",     r"\blto\b",
                                        # Don't match '.opt', '-opt',
                                        # '^opt' or '/opt'.
                r"\bmacho-dump\b",      r"(?<!\.|-|\^|/)\bopt\b",
                r"\btblgen\b",          r"\bFileCheck\b",
                r"\bFileUpdate\b",      r"\bc-index-test\b",
                r"\bfpcmp\b",           r"\bllvm-PerfectShuffle\b",
                # Handle these specially as they are strings searched
                # for during testing.
                r"\| \bcount\b",         r"\| \bnot\b"]:
    # Extract the tool name from the pattern.  This relies on the tool
    # name being surrounded by \b word match operators.  If the
    # pattern starts with "| ", include it in the string to be
    # substituted.
    substitution = re.sub(r"^(\\)?((\| )?)\W+b([0-9A-Za-z-_]+)\\b\W*$",
                          r"\2" + llvm_tools_dir + "/" + r"\4",
                          pattern)
    for ext in pathext:
        substitution_ext = substitution + ext
        if os.path.exists(substitution_ext):
             substitution = substitution_ext
             break
    config.substitutions.append((pattern, fixupPath(substitution)))

excludes = []

# Provide target_triple for use in XFAIL and XTARGET.
##config.target_triple = site_exp['target_triplet']

import os

def inferCling(PATH):
    # Determine which cling to use.
    cling = os.getenv('CLING')

    # If the user set cling in the environment, definitely use that and don't
    # try to validate.
    if cling:
        return cling

    # Otherwise look in the path.
    cling = lit.util.which('cling', PATH)

    if not cling:
        lit_config.fatal("couldn't find 'cling' program, try setting "
                  "CLING in your environment")

    return cling

# When running under valgrind, we mangle '-vg' onto the end of the triple so we
# can check it with XFAIL and XTARGET.
if lit_config.useValgrind:
    config.target_triple += '-vg'

config.cling = fixupPath(inferCling(getattr(config, 'llvm_tools_dir', None)))
if not lit_config.quiet:
    lit_config.note('using cling: %r' % config.cling)

#Start cling with nologo
config.substitutions.append(('%cling_obj_root', cling_obj_root))
config.substitutions.append( ('%cling', config.cling + ' --nologo') )
if not os.getenv('CLING'):
  # Add a substitution for the builds generated include dir before install
  incDir = os.path.join(config.llvm_obj_root, 'tools', 'clang', 'include')
  config.substitutions.append( ('%built_cling', config.cling + ' --nologo -I%s'
                                                   % fixupPath(incDir)) )
  if not lit_config.quiet:
    lit_config.note('Running tests from build tree')
else:
  config.substitutions.append( ('%built_cling', config.cling + ' --nologo') )
  if not lit_config.quiet:
    lit_config.note('Running tests from installation')

if platform.system() in ['Windows']:
  config.substitutions.append(('%dllexport', '"__declspec(dllexport)"'))
  config.substitutions.append(('%fPIC', ''))
else:
  config.substitutions.append(('%dllexport', ''))
  config.substitutions.append(('%fPIC', '-fPIC'))

if IsWindows and execute_external:
  config.substitutions.append(('%mkdir', 'mkdir'))
  config.substitutions.append(('%rmdir', 'rmdir /s /q'))
  config.substitutions.append(('%rm', 'del /s /q'))
else:
  config.substitutions.append(('%mkdir', 'mkdir -p'))
  config.substitutions.append(('%rmdir', 'rm -rf'))
  config.substitutions.append(('%rm', 'rm -f'))

# Don't add tests to history
os.environ['CLING_NOHISTORY'] = '1'

# FIXME: Find nicer way to prohibit this.
config.substitutions.append(
    (' cling ', """*** Do not use 'cling' in tests, use '%cling'. ***""") )

### Features


# Shell execution
if platform.system() not in ['Windows'] or lit_config.getBashPath() != '':
    config.available_features.add('shell')

# Filter-out tests not supposed to run on Windows
if platform.system() not in ['Windows']:
    config.available_features.add('not_system-windows')

# Do we have cling and clang sources under llvm? Some tests
# require it.
if not os.path.exists(os.path.join(config.test_exec_root, "..", "..", "clang", "test")):
  config.test_exec_root = os.path.join(config.test_exec_root, "..", "..")
config.substitutions.append(('%testexecdir', config.test_exec_root))
config.substitutions.append(('%llvmsrcdir', config.llvm_src_root))
config.available_features.add('vanilla-cling')

libcudart_path = lit.util.which('libcudart.so', config.environment.get('LD_LIBRARY_PATH',''))
if libcudart_path is not None:
  config.available_features.add('cuda-runtime')
  # set the CUDA SDK root path
  # necessary if CUDA is not installed under /usr/local/
  config.substitutions.append(('%cudapath', libcudart_path[0:-len('/lib64/libcudart.so')]))
  # limit the number of usable GPUs in a system
  # https://developer.nvidia.com/blog/cuda-pro-tip-control-gpu-visibility-cuda_visible_devices/
  if 'CUDA_VISIBLE_DEVICES' in os.environ:
      config.environment['CUDA_VISIBLE_DEVICES'] = os.environ['CUDA_VISIBLE_DEVICES']

# Loadable module
# FIXME: This should be supplied by Makefile or autoconf.
#if sys.platform in ['win32', 'cygwin']:
#    loadable_module = (config.enable_shared == 1)
#else:
#    loadable_module = True
#
#if loadable_module:
#    config.available_features.add('loadable_module')
