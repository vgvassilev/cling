# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os
import platform
import re

import lit.util
import lit.formats

# name: The name of this test suite.
config.name = 'Cling'
# Tweak PATH for Win32
if platform.system() == 'Windows':
    # Seek sane tools in directories and set to $PATH.
    path = getattr(config, 'lit_tools_dir', None)
    path = lit_config.getToolsPath(path,
                            config.environment['PATH'],
                            ['cmp.exe', 'grep.exe', 'sed.exe'])
    if path is not None:
        path = os.path.pathsep.join((path,
                                     config.environment['PATH']))
        config.environment['PATH'] = path

# testFormat: The test format to use to interpret tests.
#
# For now we require '&&' between commands, until they get globally killed and
# the test runner updated.
execute_external = (platform.system() != 'Windows'
                    or lit_config.getBashPath() not in [None, ""])
# testFormat: The test format to use to interpret tests.
#config.test_format = lit_config.formats.TclTest()
config.test_format = lit.formats.ShTest(execute_external)

# suffixes: A list of file extensions to treat as test files.
#config.suffixes = ['.c', '.cpp', '.m', '.mm', '.cu', '.ll', '.cl']

# suffixes: A list of file extensions to treat as test files, this is actually
# set by on_clone().
config.suffixes = ['.C']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)
# test_exec_root: The root path where tests should be run.
cling_obj_root = getattr(config, 'cling_obj_root', None)
if cling_obj_root is not None:
    config.test_exec_root = os.path.join(cling_obj_root, 'test')

# Set llvm_{src,obj}_root for use by others.
config.llvm_src_root = getattr(config, 'llvm_src_root', None)
config.llvm_obj_root = getattr(config, 'llvm_obj_root', None)

# Tweak the PATH to include the tools dir and the scripts dir.
if cling_obj_root is not None:
    llvm_tools_dir = getattr(config, 'llvm_tools_dir', None)
    if not llvm_tools_dir:
        lit_config.fatal('No LLVM tools dir set!')
    path = os.path.pathsep.join((llvm_tools_dir, config.environment['PATH']))

    # For MacOS with libc++, our clang will not find libc++ causing errors with
    # STL. Use the XCode one instead by not adding ours to the path. Cling is
    # still found through deferCling().
    # Avoid adding our *+Asserts/bin folder to the path because, it will resolve
    # to the clang binary residing there, causing the havoc described above.
    #if platform.mac_ver()[0] is '' or \
    #  float('.'.join(platform.mac_ver()[0].split('.')[:2])) < 10.9:
    #    config.environment['PATH'] = path

    llvm_libs_dir = getattr(config, 'llvm_libs_dir', None)
    if not llvm_libs_dir:
        lit_config.fatal('No LLVM libs dir set!')
    path = os.path.pathsep.join((llvm_libs_dir,
                                 config.environment.get('LD_LIBRARY_PATH','')))
    config.environment['LD_LIBRARY_PATH'] = path

###

# Check that the object root is known.
if config.test_exec_root is None:
    # Otherwise, we haven't loaded the site specific configuration (the user is
    # probably trying to run on a test file directly, and either the site
    # configuration hasn't been created by the build system, or we are in an
    # out-of-tree build situation).

    # Check for 'cling_site_config' user parameter, and use that if available.
    site_cfg = lit_config.params.get('cling_site_config', None)
    if site_cfg and os.path.exists(site_cfg):
        lit_config.load_config(config, site_cfg)
        raise SystemExit

    # Try to detect the situation where we are using an out-of-tree build by
    # looking for 'llvm-config'.
    #
    # FIXME: I debated (i.e., wrote and threw away) adding logic to
    # automagically generate the lit.site.cfg if we are in some kind of fresh
    # build situation. This means knowing how to invoke the build system though,
    # and I decided it was too much magic. We should solve this by just having
    # the .cfg files generated during the configuration step.

    llvm_config = lit.util.which('llvm-config', config.environment['PATH'])
    if not llvm_config:
        lit_config.fatal('No site specific configuration available!')

    # Get the source and object roots.
    llvm_src_root = lit.util.capture(['llvm-config', '--src-root']).strip()
    llvm_obj_root = lit.util.capture(['llvm-config', '--obj-root']).strip()
    cling_src_root = os.path.join(llvm_src_root, "tools", "cling")
    cling_obj_root = os.path.join(llvm_obj_root, "tools", "cling")

    # Validate that we got a tree which points to here, using the standard
    # tools/cling layout.
    this_src_root = os.path.dirname(config.test_source_root)
    if os.path.realpath(cling_src_root) != os.path.realpath(this_src_root):
        lit_config.fatal('No site specific configuration available!')

    # Check that the site specific configuration exists.
    site_cfg = os.path.join(cling_obj_root, 'test', 'lit.site.cfg')
    if not os.path.exists(site_cfg):
        lit_config.fatal('No site specific configuration available! You may need to '
                  'run "make test" in your Clang build directory.')

    # Okay, that worked. Notify the user of the automagic, and reconfigure.
    lit_config.note('using out-of-tree build at %r' % cling_obj_root)
    lit_config.load_config(config, site_cfg)
    raise SystemExit

###

# Discover the 'cling' to use.

# Load site data from DejaGNU's site.exp.
import re
site_exp = {}
# FIXME: Implement lit.site.cfg.
##for line in open(os.path.join(config.llvm_obj_root, 'test', 'site.exp')):
##    m = re.match('set ([^ ]+) "(.*)"', line)
##    if m:
##       site_exp[m.group(1)] = m.group(2)


# Add substitutions.
##config.substitutions.append(('%llvmgcc_only', site_exp['llvmgcc']))
##for sub in ['llvmgcc', 'llvmgxx', 'emitir', 'compile_cxx', 'compile_c',
##            'link', 'shlibext', 'ocamlopt', 'llvmdsymutil', 'llvmlibsdir',
##            'llvmshlibdir',
##            'bugpoint_topts']:
##    if sub in ('llvmgcc', 'llvmgxx'):
##        config.substitutions.append(('%' + sub,
##                                     site_exp[sub] + ' %emitir -w'))
##    # FIXME: This is a hack to avoid LLVMC tests failing due to a clang driver
##    #        warning when passing in "-fexceptions -fno-exceptions".
##    elif sub == 'compile_cxx':
##        config.substitutions.append(('%' + sub,
##                                  site_exp[sub].replace('-fno-exceptions', '')))
##    else:
##        config.substitutions.append(('%' + sub, site_exp[sub]))
config.substitutions.append(('%testexecdir', config.test_exec_root))
config.substitutions.append(('%shlibext', config.shlibext))

# For each occurrence of an llvm tool name as its own word, replace it
# with the full path to the build directory holding that tool.  This
# ensures that we are testing the tools just built and not some random
# tools that might happen to be in the user's PATH.  Thus this list
# includes every tool placed in $(LLVM_OBJ_ROOT)/$(BuildMode)/bin
# (llvm_tools_dir in lit parlance).
                # Don't match 'bugpoint-' or 'clang-'.
                                        # Don't match '/clang'.
if os.pathsep == ';':
    pathext = os.environ.get('PATHEXT', '').split(';')
else:
    pathext = ['']
for pattern in [r"\bbugpoint\b(?!-)",   r"(?<!/)\bclang\b(?!-)",
                r"\bgold\b",
                r"\bllc\b",             r"\blli\b",
                r"\bllvm-ar\b",         r"\bllvm-as\b",
                r"\bllvm-bcanalyzer\b", r"\bllvm-config\b",
                r"\bllvm-diff\b",       r"\bllvm-dis\b",
                r"\bllvm-extract\b",    r"\bllvm-ld\b",
                r"\bllvm-link\b",       r"\bllvm-mc\b",
                r"\bllvm-nm\b",         r"\bllvm-prof\b",
                r"\bllvm-ranlib\b",     r"\bllvm-shlib\b",
                r"\bllvm-stub\b",       r"\bllvm2cpp\b",
                # Don't match '-llvmc'.
                r"(?<!-)\bllvmc\b",     r"\blto\b",
                                        # Don't match '.opt', '-opt',
                                        # '^opt' or '/opt'.
                r"\bmacho-dump\b",      r"(?<!\.|-|\^|/)\bopt\b",
                r"\btblgen\b",          r"\bFileCheck\b",
                r"\bFileUpdate\b",      r"\bc-index-test\b",
                r"\bfpcmp\b",           r"\bllvm-PerfectShuffle\b",
                # Handle these specially as they are strings searched
                # for during testing.
                r"\| \bcount\b",         r"\| \bnot\b"]:
    # Extract the tool name from the pattern.  This relies on the tool
    # name being surrounded by \b word match operators.  If the
    # pattern starts with "| ", include it in the string to be
    # substituted.
    substitution = re.sub(r"^(\\)?((\| )?)\W+b([0-9A-Za-z-_]+)\\b\W*$",
                          r"\2" + llvm_tools_dir + "/" + r"\4",
                          pattern)
    for ext in pathext:
        substitution_ext = substitution + ext
        if os.path.exists(substitution_ext):
             substitution = substitution_ext
             break
    config.substitutions.append((pattern, substitution))

excludes = []

# Provide target_triple for use in XFAIL and XTARGET.
##config.target_triple = site_exp['target_triplet']

import os

def inferCling(PATH):
    # Determine which cling to use.
    cling = os.getenv('CLING')

    # If the user set cling in the environment, definitely use that and don't
    # try to validate.
    if cling:
        return cling

    # Otherwise look in the path.
    cling = lit.util.which('cling', PATH)

    if not cling:
        lit_config.fatal("couldn't find 'cling' program, try setting "
                  "CLING in your environment")

    return cling

# When running under valgrind, we mangle '-vg' onto the end of the triple so we
# can check it with XFAIL and XTARGET.
if lit_config.useValgrind:
    config.target_triple += '-vg'

config.cling = inferCling(getattr(config, 'llvm_tools_dir', None)).replace('\\', '/')
if not lit_config.quiet:
    lit_config.note('using cling: %r' % config.cling)

#Start cling with nologo
config.substitutions.append( ('%cling', ' ' + config.cling + ' --nologo') )

# FIXME: Find nicer way to prohibit this.
config.substitutions.append(
    (' cling ', """*** Do not use 'cling' in tests, use '%cling'. ***""") )
# Provide on_clone hook for reading 'dg.exp'.
import os
simpleLibData = re.compile(r"""load_lib llvm.exp

RunLLVMTests \[lsort \[glob -nocomplain \$srcdir/\$subdir/\*\.(.*)\]\]""",
                           re.MULTILINE)
conditionalLibData = re.compile(r"""load_lib llvm.exp

if.*\[ ?(llvm[^ ]*) ([^ ]*) ?\].*{
 *RunLLVMTests \[lsort \[glob -nocomplain \$srcdir/\$subdir/\*\.(.*)\]\]
\}""", re.MULTILINE)
def on_clone(parent, cfg, for_path):
    def addSuffixes(match):
        if match[0] == '{' and match[-1] == '}':
            cfg.suffixes = ['.' + s for s in match[1:-1].split(',')]
        else:
            cfg.suffixes = ['.' + match]

    libPath = os.path.join(os.path.dirname(for_path),
                           'dg.exp')
    if not os.path.exists(libPath):
        cfg.unsupported = True
        return

    # Reset unsupported, in case we inherited it.
    cfg.unsupported = False
    lib = open(libPath).read().strip()

    # Check for a simple library.
    m = simpleLibData.match(lib)
    if m:
        addSuffixes(m.group(1))
        return

    # Check for a conditional test set.
    m = conditionalLibData.match(lib)
    if m:
        funcname,arg,match = m.groups()
        addSuffixes(match)

        func = globals().get(funcname)
        if not func:
            lit_config.error('unsupported predicate %r' % funcname)
        elif not func(arg):
            cfg.unsupported = True
        return
    # Otherwise, give up.
    lit_config.error('unable to understand %r:\n%s' % (libPath, lib))

config.on_clone = on_clone

### Features


# Shell execution
if platform.system() not in ['Windows'] or lit_config.getBashPath() != '':
    config.available_features.add('shell')

# Loadable module
# FIXME: This should be supplied by Makefile or autoconf.
#if sys.platform in ['win32', 'cygwin']:
#    loadable_module = (config.enable_shared == 1)
#else:
#    loadable_module = True
#
#if loadable_module:
#    config.available_features.add('loadable_module')
