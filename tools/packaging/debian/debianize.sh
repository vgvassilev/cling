#! /bin/bash

###############################################################################
#
#                           The Cling Interpreter
#
# Cling Packaging Tool (CPT)
#
# tools/packaging/debian/debianize.sh: Helper script to produce Debian packages
# for Ubuntu/Debian platforms.
#
# Author: Anirudha Bose <ani07nov@gmail.com>
#
# This file is dual-licensed: you can choose to license it under the University
# of Illinois Open Source License or the GNU Lesser General Public License. See
# LICENSE.TXT for details.
#
###############################################################################

# Uncomment the following line to trace the execution of the shell commands
# set -o xtrace

SIGNING_USER=$(gpg --fingerprint | grep uid | sed s/"uid *"//g | tr -s " ")

function tarball_deb {
  box_draw "Compressing compiled binaries to produce a bzip2 tarball"
  cd ${workdir}
  tar -cjvf cling_${VERSION}.orig.tar.bz2 -C . $(basename ${prefix})
}

function debianize {
  box_draw "Set up the debian directory"
  cd ${prefix}
  echo "Create directory: debian"
  mkdir -p debian

  mkdir -p debian/source
  echo "Create file: debian/source/format"
  echo "3.0 (quilt)" > debian/source/format

  echo "Create file: debian/source/lintian-overrides"
  cat >> debian/source/lintian-overrides << EOF
cling source: source-is-missing
EOF

: '
# This section is no longer valid. I have kept it as a reference if we plan to
# distribute libcling.so or any other library with the package.
  echo "Create file: debian/postinst"
  cat >> debian/postinst << EOF
#! /bin/sh -e
# postinst script for cling
#
# see: dh_installdeb(1)

set -e

# Call ldconfig on libclang.so
ldconfig -l /usr/lib/libclang.so

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
EOF
'

  echo "Create file: debian/cling.install"
  cat >> debian/cling.install << EOF
bin/* /usr/bin
docs/* /usr/share/doc
include/* /usr/include
lib/* /usr/lib
share/* /usr/share
EOF

  echo "Create file: debian/compact"
  # Optimize binary compression
  echo "7" > debian/compact

  echo "Create file: debian/compat"
  echo "9" > debian/compat

  echo "Create file: debian/control"
  cat >> debian/control << EOF
Source: cling
Section: devel
Priority: optional
Maintainer: Cling Developer Team <cling-dev@cern.ch>
Uploaders: Anirudha Bose <ani07nov@gmail.com>
Build-Depends: debhelper (>= 9.0.0)
Standards-Version: 3.9.5
Homepage: http://cling.web.cern.ch/
Vcs-Git: http://root.cern.ch/git/cling.git
Vcs-Browser: http://root.cern.ch/gitweb?p=cling.git;a=summary

Package: cling
Priority: optional
Architecture: any
Depends: \${shlibs:Depends}, \${misc:Depends}
Description: interactive C++ interpreter
 Cling is a new and interactive C++11 standard compliant interpreter built
 on the top of Clang and LLVM compiler infrastructure. Its advantages over
 the standard interpreters are that it has command line prompt and uses
 Just In Time (JIT) compiler for compilation. Many of the developers
 (e.g. Mono in their project called CSharpRepl) of such kind of software
 applications name them interactive compilers.
 .
 One of Cling's main goals is to provide contemporary, high-performance
 alternative of the current C++ interpreter in the ROOT project - CINT. Cling
 serves as a core component of the ROOT system for storing and analyzing the
 data of the Large Hadron Collider (LHC) experiments. The
 backward-compatibility with CINT is major priority during the development.
EOF

  echo "Create file: debian/copyright"
  cat >> debian/copyright << EOF
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: cling
Source: http://root.cern.ch/gitweb?p=cling.git;a=summary

Files: *
Copyright: 2007-2014 by the Authors
License: LGPL-2.0+
Comment: Developed by The ROOT Team; CERN and Fermilab

Files: debian/*
Copyright: 2014 Anirudha Bose <ani07nov@gmail.com>
License: LGPL-2.0+

License: LGPL-2.0+
 This package is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.
 .
 This package is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 .
 You should have received a copy of the GNU General Public License
 along with this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU Lesser General
 Public License can be found in "/usr/share/common-licenses/LGPL-2".
Comment: Cling can also be licensed under University of Illinois/NCSA
 Open Source License (UI/NCSAOSL).
 .
 More information here: http://root.cern.ch/gitweb?p=cling.git;a=blob_plain;f=LICENSE.TXT;hb=HEAD
EOF

  echo "Create file: debian/rules"
  cat >> debian/rules << EOF
#!/usr/bin/make -f
# -*- makefile -*-

%:
	dh \$@

override_dh_auto_build:

override_dh_auto_install:
EOF

  echo "Create file: debian/changelog"

  cat >> ${prefix}/debian/changelog << EOF
cling (${VERSION}-1) unstable; urgency=low

  * [Debian] Upload to unstable for version: ${VERSION}
EOF
  cd ${CLING_SRC_DIR}
  echo "${VERSION}" | grep -qE "dev"
  if [ "${?}" = 0 ]; then
    TAG_A=${VERSION/~*/}
    TAG=$(echo "${TAG_A/v/} 0.1" | awk '{printf "%.1f", $1 - $2}')
    git log v${TAG}...HEAD --format="  * %s" | fmt -s >> ${prefix}/debian/changelog
    echo -e "\n -- ${SIGNING_USER}  $(date --rfc-2822)\n" >> ${prefix}/debian/changelog
  else
    TAG=${VERSION/v/}
    if [ ${TAG} = "0.1" ]; then
      echo -e "\n -- ${SIGNING_USER}  $(date --rfc-2822)\n" >> ${prefix}/debian/changelog
    fi
    STABLE_FLAG="1"
  fi

  while [ "${TAG}" != "0.1" ]; do
    CMP=$TAG
    TAG=$(echo "${TAG} 0.1" | awk '{printf "%.1f", $1 - $2}')
    if [ STABLE_FLAG != "1" ]; then
      echo -e "cling (${TAG/v/}-1) unstable; urgency=low\n" >> ${prefix}/debian/changelog
      STABLE_FLAG="1"
    fi
    git log v${CMP}...v${TAG} --format="  * %s" | fmt -s >> ${prefix}/debian/changelog
    echo -e "\n -- ${SIGNING_USER}  $(date --rfc-2822)\n" >> ${prefix}/debian/changelog
  done

  # Changelog entries from first commit to v0.1
  echo "Old Changelog:" >> ${prefix}/debian/changelog
  git log v0.1 --format="  * %s%n -- %an <%ae>  %cD%n" >> ${prefix}/debian/changelog
  cd -

  box_draw "Run debuild to create Debian package"
  debuild
}

function check_ubuntu {
  if [ $(dpkg-query -W -f='${Status}' ${1} 2>/dev/null | grep -c "ok installed") -eq 0 ];
  then
    printf "%-10s\t\t[NOT INSTALLED]\n" "${1}"
  else
    if [ ${1} = "gnupg" -a "${SIGNING_USER}" = "" ]; then
      printf "%-10s\t\t[INSTALLED - NOT SETUP]\n" "${1}"
    else
      printf "%-10s\t\t[OK]\n" "${1}"
    fi
  fi
}
